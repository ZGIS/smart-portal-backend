#
# Copyright (c) 2011-2017 Interfaculty Department of Geoinformatics, University of
# Salzburg (Z_GIS) & Institute of Geological and Nuclear Sciences Limited (GNS Science)
# in the SMART Aquifer Characterisation (SAC) programme funded by the New Zealand
# Ministry of Business, Innovation and Employment (MBIE)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Preflight for CORS
# OPTIONS        /*all                                  controllers.HomeController.preflight(all)

# empty / redirect landing page
GET         /                                              controllers.HomeController.index
GET         /api/v1/discovery                              controllers.HomeController.discovery(fields: Option[String])

# Authentication
POST        /api/v1/login                                  controllers.HomeController.login

GET         /api/v1/logout                                 controllers.HomeController.logout
POST        /api/v1/logout                                 controllers.HomeController.logout

GET         /api/v1/recaptcha/validate                     controllers.HomeController.recaptchaValidate(recaptcaChallenge: String)

# Users Authentication with Google
POST        /api/v1/login/gconnect                         controllers.UserController.gconnect
POST        /api/v1/login/oauth2callback                   controllers.UserController.oauth2callback
GET         /api/v1/logout/gdisconnect                     controllers.UserController.gdisconnect

# Users API
GET         /api/v1/users/self                             controllers.UserController.userSelf
GET         /api/v1/users/profile/:email                   controllers.UserController.getProfile(email: String)
POST        /api/v1/users/update                           controllers.UserController.updateProfile
POST        /api/v1/users/updatepass                       controllers.UserController.updatePassword
POST        /api/v1/users/resetpass                        controllers.UserController.resetPasswordRequest
POST        /api/v1/users/resetpass/:linkId                controllers.UserController.resetPasswordRedeem(linkId: String)
POST        /api/v1/users/register                         controllers.UserController.registerUser
GET         /api/v1/users/register/:linkId                 controllers.UserController.registerConfirm(linkId: String)
GET         /api/v1/users/deleteself                       controllers.UserController.deleteSelf

# CSW-T
POST        /api/v1/csw/insert                             controllers.CswController.insert
GET         /api/v1/csw/get-valid-values-for/:topic        controllers.CswController.getValidValuesFor(topic: String)

# Collections (OwcDocuments)
GET         /api/v1/collections                            controllers.CollectionsController.getCollections(id: Option[String])
GET         /api/v1/collections/default                    controllers.CollectionsController.getPersonalDefaultCollection
GET         /api/v1/collections/default/files              controllers.CollectionsController.getPersonalFilesFromDefaultCollection
POST        /api/v1/collections                            controllers.CollectionsController.insertCollection
POST        /api/v1/collections/update                     controllers.CollectionsController.updateCollection
GET         /api/v1/collections/delete                     controllers.CollectionsController.deleteCollection(id: String)

# experimental, entries add, replace, delete from collections
POST        /api/v1/collections/entry                      controllers.CollectionsController.addResourceToCollection(collectionid: String)
POST        /api/v1/collections/entry/replace              controllers.CollectionsController.replaceResourceInCollection(collectionid: String)
GET         /api/v1/collections/entry/delete               controllers.CollectionsController.deleteResourceFromCollection(collectionid: String, resourceid: String)

# Files API
# POST        /api/v1/files/uploaddirect                     controllers.FilesController.uploadDirect
POST        /api/v1/files/uploadform                       controllers.FilesController.uploadMultipartForm
GET         /api/v1/files/linkLogging                      controllers.FilesController.logLinkInfo(link: String)

POST        /api/v1/sos/timeseries                         controllers.SosDataController.getTimeseries()
POST        /api/v1/sos/timeseries-wml2                    controllers.SosDataController.exportTimeseries()
GET         /api/v1/sos/getCapabilities                    controllers.SosDataController.getCapabilities(sosUrl: String)

# Admin API
GET         /api/v1/admin/ami                              controllers.AdminController.amiAdmin
GET         /api/v1/admin/groups                           controllers.AdminController.getAllUserGroups
POST        /api/v1/admin/groups/create                    controllers.AdminController.createUserGroupAsAdmin
POST        /api/v1/admin/groups/update                    controllers.AdminController.updateUserGroupAsAdmin
POST        /api/v1/admin/groups/delete                    controllers.AdminController.deleteUserGroupAsAdmin
POST        /api/v1/admin/sparql/update                    controllers.AdminController.sparqleUpdateCollection
GET         /api/v1/admin/users                            controllers.AdminController.getAllUsers
GET         /api/v1/admin/userfiles                        controllers.AdminController.getAllUserFiles
GET         /api/v1/admin/usermetarecords                  controllers.AdminController.getallUserMetaRecords
GET         /api/v1/admin/requestlogs                      controllers.AdminController.getallUserLinkLoggings
GET         /api/v1/admin/requestlogsbyname                controllers.AdminController.findUserLinkLoggingsByLink(link: String)
GET         /api/v1/admin/users/:command/:email            controllers.AdminController.blockUnblockUsers(command: String, email: String)

# https://dev.smart-project.info/api/v1/sitemap/collections.xml
GET         /api/v1/sitemap/collections.xml                controllers.CollectionsController.generateSitemapFromPubliccollections

# Map static resources from the /public folder to the /assets URL path
GET         /fs/*file                                      controllers.Assets.versioned(path="/public", file: Asset)
